#include <SFML/Graphics.hpp>
#include "Level.h"
#include "TinyXML/tinyxml.h"
 
using namespace sf;
using namespace lv;
 
class Gravitation {

	std::vector<Object> object;
	float dx, dy, x, y;
	int w,h;
	bool onGround;
	Sprite sprite;
	float time;
public:

	Gravitation(Sprite sp, Level &lev, float dx, float dy, int W, int H, float X, float Y, float t) {   
		object = lev.GetAllObjects();
		dx = 0;
		dy = 0;
		sprite = sp;
		time = t;
		w = W; h = H;
		x = X; y = Y;
		sprite.setTextureRect(IntRect(0, 0, w, h));
		}


	FloatRect Get_Rect()
	{
		return FloatRect(x, y, w, h);
	}


	void Collision_With_Map(float Fx, float Fy)
	{
		
		for (int i = 0; i<object.size(); i++)
		if (Get_Rect().intersects(object[i].rect))
		{
			if (object[i].name == "solid")
			{	if (Fy>0)	
					{ 
					y = object[i].rect.top - h;  
					dy = 0; 
					onGround = true; 
					}
				if (Fy<0)	
					{ 
					y = object[i].rect.top + object[i].rect.height;   
					dy = 0; 
					}
				if (Fx>0)	
					{ 
					x = object[i].rect.left - w;  
					}
				if (Fx<0)	
					{ 
					x = object[i].rect.left + object[i].rect.width; 
				    }
			}
			else 
			{ 
				onGround = false;
			}
		}
		if(onGround == false)
			dy = dy + 0.001*time;
	}
 

	void update()
	{
			Collision_With_Map(dx, 0);
			x += dx*time;
			Collision_With_Map(0, dy);
			sprite.setPosition(x+w, y+h);
	}
   
};
